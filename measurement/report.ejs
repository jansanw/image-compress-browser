<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>报告-浏览器图片压缩测试</title>
    <meta name="viewport" content="width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no">
    <link rel="stylesheet" href="http://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <style>
    button {
        margin: 10px;
    }
    body {
        padding: 10px;
    }
    h3  {
        margin-top: 80px;
        border-top: 2px solid #ddd;
        line-height: 30px;
    }
    </style>
    <script src="https://cdn.bootcss.com/zepto/1.2.0/zepto.min.js"></script>
    <script src="https://cdn.bootcss.com/echarts/3.5.0/echarts.min.js"></script>
    <script src="/dist/compressImage.js"></script>
</head>
<body>
    <h1>浏览器图片压缩-报告</h1>
<% if (query.log == 'main') { %>
    <h3>浏览器图片压缩</h3>
    <p>许多H5页面都有图片上传的功能，在上传之前实现图片压缩，既可以节省带宽，也可以加快上传速度。
    <br/>但是在浏览器端进行图片压缩，在比较容易想到的办法里，压缩效果不明显，而且也会遇到在ios里出现压缩后图片出现图片显示不对等问题，
    <br/>因此这里深入探讨浏览器进行图片压缩的种种办法和最后效果。
    </p>
    <p>使用场景：
    <br/>wise图片上传识别
    </p>

    <p>
    <br/><a href="/">前往测试页面</a>
    </p>


    <h3>压缩过程解析</h3>
    <h5>按粉红色先后划分各个阶段</h5>
    <table class="table table-bordered table-hover">
        <tbody>
            <tr class="">
                <td class="danger">File转换</td>
                <td>通过file控件等获取图片文件的File对象。将File对象转成URl，有两种URL，(1)DataURL 或者 (2)Blob Url</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr class="">
                <td></td>
                <td class="danger">转换成Image</td>
                <td>绘制Canvas需要用Image</td>
                <td></td>
                <td></td>
            </tr>
            <tr class="">
                <td></td>
                <td></td>
                <td class="danger">获取方位</td>
                <td></td>
                <td></td>
            </tr>
            <tr class="">
                <td></td>
                <td></td>
                <td></td>
                <td class="danger">Canvas绘制</td>
                <td>Canvas绘制包含：根据方位值旋转Canvas，以此纠正IOS图片显示不正问题</td>
                <td></td>
            </tr>
            <tr class="">
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="danger">Canvas输出：(1)toBlob 或者 (2)toDataURL</td>
                <td></td>
            </tr>
        </tbody>
    </table>

    <div class="">

    </div>
    <h3>不同压缩方式说明</h3>
    <h5>根据以上过程，存在四种压缩方式</h5>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <td>方式</td>
                <td >说明</td>
            </tr>
        </thead>
        <tbody>
            <tr class="">
                <td>简版exif和DataUrl</td>
                <td>自己实现获取图片方位的meta代码，同时压缩后输出DataUrl</td>
            </tr>
            <tr class="">
                <td>简版exif和Blob</td>
                <td>自己实现获取图片方位的meta代码，同时压缩后输出Blob</td>
            </tr>
            <tr class="">
                <td>Exif和DataUrl</td>
                <td>采用外部Exif.js，同时压缩后输出DataUrl</td>
            </tr>
            <tr class="">
                <td>Exif和Blob</td>
                <td>采用外部Exif.js，同时压缩后输出Blob</td>
            </tr>
        </tbody>
    </table>

    <h3>不同压缩方式综合比较</h3>
    <h5>未表明单位的默认都是 ms</h5>
    <p class="bg-info">基于压缩性能、带宽、代码体积、后端识别压力 考量</p>
    <p class="bg-info">最优压缩方式：简版exif和Blob。</p>
    <p class="bg-info">最终产出npm包：<a target="_blank" href="https://www.npmjs.com/package/image-compress-browser">image-compress-browser</a></p>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <td>方式</td>
                <td >获取方位耗时</td>
                <td >压缩模块耗时</td>
                <td >上传</td>
                <td >总耗时（压缩上传）</td>
                <td >图片尺寸等比缩小</td>
                <td >图片体积减少</td>
                <td >减少百分</td>
                <td >代码大小</td>
            </tr>
        </thead>
        <tbody>
            <% overallList.forEach(function(item){ %>
            <tr class="<%= item.type == '不压缩' ? 'success' : '' %> <%= item.type == '简版exif和Blob' ? 'success' : '' %>">
                <td><%= item.type %></td>
                <td><%= item.orientation %></td>
                <td ><%= item.type.indexOf('不压缩') > -1 ? '0' : (+item.total - (+item.upload)).toFixed(2) %></td>
                <td><%= item.type.indexOf('不压缩') > -1 ? item.total : item.upload %></td>
                <td><%= item.total %></td>
                <td ><%= item.type.indexOf('不压缩') > -1 ? '0' : parseInt((item.oriWidth - item.newWidth) / item.oriWidth * 100, 10) %>%</td>
                <td><%= item.type.indexOf('不压缩') > -1 ? '0' : parseInt((item.oriSize - item.newSize) / 1000) %>kb</td>
                <td ><%= item.type.indexOf('不压缩') > -1 ? '0' : parseInt((item.oriSize - item.newSize) / item.oriSize * 100) %>%</td>
                <td ><%= item.type.indexOf('简版exif') > -1 ? '5.6k' : item.type.indexOf('Exif') > -1 ? '19k' : '' %></td>
            </tr>
            <% }) %>
        </tbody>
    </table>


    <h3>不同压缩方式对比图</h3>
    <!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->
    <div id="main" style="width: 800px;height:400px;"></div>
    <script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main'));

        // 指定图表的配置项和数据
        var option = {
            title: {
                text: '不同压缩方式对比-耗时ms'
            },
            tooltip: {},
            legend: {
                data:['耗时']
            },
            xAxis: {

                data: JSON.parse('<%- JSON.stringify(osTypeListConvertData.type) %>')
            },
            yAxis: {},
            series: [
                {
                    name: '方式',
                    type: 'bar',
                    data: JSON.parse('<%- JSON.stringify(osTypeListConvertData.total) %>')
                }
            ]
        };

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>


    <!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->
    <div id="main1" style="width: 800px;height:400px;"></div>
    <script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main1'));

        // 指定图表的配置项和数据
        var option = {
            title: {
                text: '不同压缩方式对比-耗时ms（Ios）'
            },
            tooltip: {},
            legend: {
                data:['耗时']
            },
            xAxis: {
                data: JSON.parse('<%- JSON.stringify(osTypePhoneListConvertData.ios.type) %>')
            },
            yAxis: {},
            series: [
                {
                    name: '方式',
                    type: 'bar',
                    data: JSON.parse('<%- JSON.stringify(osTypePhoneListConvertData.ios.total) %>')
                }
            ]
        };

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>

    <!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->
    <div id="main2" style="width: 800px;height:400px;"></div>
    <script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main2'));

        // 指定图表的配置项和数据
        var option = {
            title: {
                text: '不同压缩方式对比-耗时ms（Android）'
            },
            tooltip: {},
            legend: {
                data:['耗时']
            },
            xAxis: {
                data: JSON.parse('<%- JSON.stringify(osTypePhoneListConvertData.android.type) %>')
            },
            yAxis: {},
            series: [
                {
                    name: '方式',
                    type: 'bar',
                    data: JSON.parse('<%- JSON.stringify(osTypePhoneListConvertData.android.total) %>')
                }
            ]
        };

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>

<% } %>


    <h3>测试数据表格</h3>
    <h5>未表明单位的默认都是 ms，<% if (query.log == 'main') { %>一行数据是数十次测试数据的均值<% } %> <% if (query.log != 'main') { %>前往 <a href="report?log=main">终极报告</a> <% } %></h5>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <td >系统</td>
                <td >机型环境</td>
                <td >类型</td>
                <td >图片</td>
                <td >结果页</td>
                <td >方位</td>
                <td >File转换</td>
                <td >转换成Image</td>
                <td >获取方位耗时</td>
                <td >Canvas绘制</td>
                <td >Canvas旋转(通过方位)</td>
                <td >Canvas输出</td>
                <td >压缩模块耗时</td>
                <td >上传</td>
                <td >总耗时（压缩上传）</td>
                <td >原始宽度</td>
                <td >原始高度</td>
                <td >新宽度</td>
                <td >新高度</td>
                <td >图片尺寸等比缩小</td>
                <td >原始大小</td>
                <td >新大小</td>
                <td >差值</td>
                <td >减少百分</td>
            </tr>
        </thead>
        <tbody>
            <% typeList.forEach(function(item){ %>
            <tr class="<%= item.os == 'ios' ? 'success' : 'info' %>">
                <td><%= item.os %></td>
                <td><%= item.phone %></td>
                <td><%= item.type %></td>
                <td><%= item.name %></td>
                <td><a href="<%= item.url %>" target="_blank">结果页</a></td>
                <td><%= item.orientation %></td>
                <td><%= item.fileTo %></td>
                <td><%= item.toImg %></td>

                <td class="danger"><%= item.orient %></td>
                <td><%= item.toCanvas %></td>
                <td><%= item.rotate %></td>
                <td class="danger"><%= item.canvasOut %></td>
                <td  class="danger"><%= item.type.indexOf('不压缩') > -1 ? '0' : (+item.total - (+item.upload)).toFixed(2) %></td>
                <td><%= item.type.indexOf('不压缩') > -1 ? item.total : item.upload %></td>
                <td><%= item.total %></td>

                <td><%= item.oriWidth %></td>
                <td><%= item.oriHeight %></td>
                <td><%= item.newWidth %></td>
                <td><%= item.newHeight  %></td>
                <td class="danger"><%= item.type.indexOf('不压缩') > -1 ? '0' : parseInt((item.oriWidth - item.newWidth) / item.oriWidth * 100, 10) %>%</td>
                <td><%= parseInt((item.oriSize) / 1000)  %>kb</td>
                <td><%= parseInt((item.newSize) / 1000)  %>kb</td>
                <td><%= item.type.indexOf('不压缩') > -1 ? '0' : parseInt((item.oriSize - item.newSize) / 1000) %>kb</td>
                <td class="danger"><%= item.type.indexOf('不压缩') > -1 ? '0' : parseInt((item.oriSize - item.newSize) / item.oriSize * 100) %>%</td>
            </tr>
            <% }) %>
        </tbody>

    <table>



    <script>


    </script>
</body>
</html>
